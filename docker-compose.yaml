version: '3.8'

services:
  # Setup container for startup
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es02\n"\
          "    dns:\n"\
          "      - es02\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es03\n"\
          "    dns:\n"\
          "      - es03\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:${ES_CONTAINER_PORT} | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:${ES_CONTAINER_PORT}/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  # Elastic Service container 01
  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_HOST_PORT}:${ES_CONTAINER_PORT}
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es02,es03
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://es01:${ES_CONTAINER_PORT} | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  # Elastic Service container 02
  es02:
    depends_on:
      - es01
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata02:/usr/share/elasticsearch/data
    environment:
      - node.name=es02
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es01,es03
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es02/es02.key
      - xpack.security.http.ssl.certificate=certs/es02/es02.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es02/es02.key
      - xpack.security.transport.ssl.certificate=certs/es02/es02.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://es02:${ES_CONTAINER_PORT} | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  # Elastic Service container 03
  es03:
    depends_on:
      - es02
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata03:/usr/share/elasticsearch/data
    environment:
      - node.name=es03
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es01,es02
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es03/es03.key
      - xpack.security.http.ssl.certificate=certs/es03/es03.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es03/es03.key
      - xpack.security.transport.ssl.certificate=certs/es03/es03.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://es03:${ES_CONTAINER_PORT} | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  # Kibana
  kibana:
    depends_on:
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      es03:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_HOST_PORT}:${KIBANA_CONTAINER_PORT}
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:${ES_CONTAINER_PORT}
      - ELASTICSEARCH_USERNAME=${KIBANA_USERNAME}
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://kibana:${KIBANA_CONTAINER_PORT} | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  # Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    depends_on:
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      es03:
        condition: service_healthy
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      - logstashdata01:/usr/share/logstash/data
      - certs:/usr/share/logstash/certs
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      #- ./logstash_es_to_rabbitmq.conf:/usr/share/logstash/pipeline/logstash_es_to_rabbitmq.conf:ro
    environment:
      - NODE_NAME="logstash"
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:${ES_CONTAINER_PORT}
    #command: logstash -f /usr/share/logstash/pipeline/logstash.conf
    ports:
      - "${LOGSTASH_HOST1_PORT}:${LOGSTASH_CONTAINER_PORT}"

  logstash2:
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    depends_on:
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      es03:
        condition: service_healthy
    labels:
      co.elastic.logs/module: logstash2
    user: root
    volumes:
      - logstashdata02:/usr/share/logstash/data
      - certs:/usr/share/logstash/certs
      #- ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./logstash/logstash_es_to_rabbitmq.conf:/usr/share/logstash/pipeline/logstash_es_to_rabbitmq.conf:ro
    environment:
      - NODE_NAME="logstash2"
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:${ES_CONTAINER_PORT}
    #command: logstash -f /usr/share/logstash/pipeline/logstash.conf
    ports:
      - "${LOGSTASH_HOST2_PORT}:${LOGSTASH_CONTAINER_PORT}"

  #metricbeat container for CPU/RAM data
  metricbeat:
    build:
      context: ./metricbeat
      dockerfile: Dockerfile
      args:
        STACK_VERSION: ${STACK_VERSION}
    container_name: metricbeat
    user: root
    cap_add:
      - NET_RAW
    environment:
      - ELASTIC_HOST=https://es01:${ES_CONTAINER_PORT}
      - ELASTIC_USER=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - ./metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD-SHELL", "metricbeat test config -c /usr/share/metricbeat/metricbeat.yml"]
      interval: 30s
      timeout: 10s
      retries: 3

  #heartbeat container for polling other containers
  heartbeat:
    build:
      context: ./heartbeat
      dockerfile: Dockerfile
      args:
        STACK_VERSION: ${STACK_VERSION}
    container_name: heartbeat
    user: root
    cap_add:
      - NET_RAW
    environment:
      - KIBANA_HOST=http://kibana:${KIBANA_CONTAINER_PORT}
      - PHPMYADMIN_WORDPRESS_HOST=http://phpmyadmin-wordpress:${PHPMYADMIN_WP_CONTAINER_PORT}
      - RABBITMQ_HOST=http://rabbitmq:${RABBITMQ_HTTP_CONTAINER_PORT}
      - LOGSTASH1_HOST=logstash:${LOGSTASH_CONTAINER_PORT}
      - LOGSTASH2_HOST=logstash2:${LOGSTASH_CONTAINER_PORT}
      - ELASTIC_HOST=https://es01:${ES_CONTAINER_PORT}
      - ELASTIC_USER=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - ./heartbeat/heartbeat.yml:/usr/share/heartbeat/heartbeat.yml
    healthcheck:
      test: ["CMD-SHELL", "heartbeat test config -c /usr/share/heartbeat/heartbeat.yml"]
      interval: 30s
      timeout: 10s
      retries: 3

  #filebeat container for logs
  filebeat:
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    container_name: filebeat
    user: root
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /registry:/usr/share/filebeat/data:rw
    environment:
      - KIBANA_HOST=http://kibana:${KIBANA_CONTAINER_PORT}
      - ELASTIC_HOST=https://es01:${ES_CONTAINER_PORT}
      - ELASTIC_USER=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    command: ["--strict.perms=false"]

  # Database UUID
  mysqldbuuid:
    container_name: mysql-uuid
    image: mysql:latest
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_UUID_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_UUID_DATABASE}
      MYSQL_USER: ${MYSQL_UUID_USER}
      MYSQL_PASSWORD: ${MYSQL_UUID_PASSWORD}
      MYSQL_TCP_PORT: ${MYSQL_UUID_CONTAINER_PORT}
    ports:
      - ${MYSQL_UUID_HOST_PORT}:${MYSQL_UUID_CONTAINER_PORT}
    volumes:
      - mysql-uuid-data:/var/lib/mysql
  
  # phpmyadmin UUID
  phpmyadminuuid:
    container_name: 'phpmyadmin-uuid'
    depends_on:
      - mysqldbuuid
    image: phpmyadmin/phpmyadmin
    restart: unless-stopped
    ports:
      - '${PHPMYADMIN_UUID_HOST_PORT}:${PHPMYADMIN_UUID_CONTAINER_PORT}'
    environment:
      PMA_HOST: mysqldbuuid:${MYSQL_UUID_CONTAINER_PORT}
      MYSQL_ROOT_PASSWORD: ${MYSQL_UUID_ROOT_PASSWORD}

  # Database wordpress
  mysqldbwp:
    container_name: mysql-wordpress
    image: mysql:latest
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_WP_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_WP_DATABASE}
      MYSQL_USER: ${MYSQL_WP_USER}
      MYSQL_PASSWORD: ${MYSQL_WP_PASSWORD}
    ports:
      - ${MYSQL_WP_HOST_PORT}:${MYSQL_WP_CONTAINER_PORT}
    volumes:
      - mysql-wordpress-data:/var/lib/mysql

  # phpmyadmin wordpress
  phpmyadminwp:
    container_name: 'phpmyadmin-wordpress'
    depends_on:
      - mysqldbwp
    image: phpmyadmin/phpmyadmin
    restart: unless-stopped
    ports:
      - '${PHPMYADMIN_WP_HOST_PORT}:${PHPMYADMIN_WP_CONTAINER_PORT}'
    environment:
      PMA_HOST: mysqldbwp:${MYSQL_WP_CONTAINER_PORT}
      MYSQL_ROOT_PASSWORD: ${MYSQL_WP_ROOT_PASSWORD}

  # Wordpress
  wordpress:
    container_name: 'wordpress'
    depends_on:
      - mysqldbwp
    image: wordpress:latest
    ports:
      - '${WP_HOST_PORT}:${WP_CONTAINER_PORT}'
    restart: unless-stopped
    volumes:
      - wordpress-data:/var/www/html:delegated
    environment:
      WORDPRESS_DB_HOST: mysqldbwp:${MYSQL_WP_CONTAINER_PORT}
      WORDPRESS_DB_USER: ${MYSQL_WP_USER}
      WORDPRESS_DB_PASSWORD: ${MYSQL_WP_PASSWORD}

  # RabbitMQ
  rabbitmq:
    container_name: 'rabbitmq'
    image: rabbitmq:3.13.0-management-alpine
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      # AMQP protocol port
      - '${RABBITMQ_AMQP_HOST_PORT}:${RABBITMQ_AMQP_CONTAINER_PORT}'
      # HTTP management UI
      - '${RABBITMQ_HTTP_HOST_PORT}:${RABBITMQ_HTTP_CONTAINER_PORT}'

  # Java Spring AMQP broker
  springamqp:
    container_name: 'springamqp'
    build:
      context: ./rabbitmq-broker
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - "${SPRING_HOST_PORT}:${SPRING_CONTAINER_PORT}"
    # depends_on:
    #   - rabbitmq
    #   - mysqldbuuid
    environment:
      SPRING_APPLICATION_JSON: '{
        "server.port" : "${SPRING_CONTAINER_PORT}",
        "spring.rabbitmq.host" : "rabbitmq",
        "spring.rabbitmq.port" : "${RABBITMQ_AMQP_CONTAINER_PORT}",
        "spring.rabbitmq.username" : "${RABBITMQ_DEFAULT_USER}",
        "spring.rabbitmq.password" : "${RABBITMQ_DEFAULT_PASS}",
        "spring.datasource.url" : "jdbc:mysql://mysqldbuuid:${MYSQL_UUID_CONTAINER_PORT}/${MYSQL_UUID_DATABASE}",
        "spring.datasource.driver-class-name" : "com.mysql.cj.jdbc.Driver",
        "spring.datasource.username" : "root", 
        "spring.datasource.password" : "${MYSQL_UUID_ROOT_PASSWORD}",
        "spring.jpa.hibernate.ddl-auto" : "update", 
        "spring.jpa.defer-datasource-initialization" : "true",
        "spring.sql.init.mode" : "always",
        "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQL8Dialect" }'
    stdin_open: true
    tty: true

  # Database odoo
  postgresodoo:
    container_name: postgres-odoo
    image: postgres:16
    ports:
      - "${POSTGRES_ODOO_HOST_PORT}:${POSTGRES_ODOO_CONTAINER_PORT}"
    environment:
      - POSTGRES_DB=${POSTGRES_ODOO_DB}
      - POSTGRES_PASSWORD=${POSTGRES_ODOO_PASSWORD}
      - POSTGRES_USER=${POSTGRES_ODOO_USER}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      default:
        aliases:
            - db

  # Odoo
  odoo:
    container_name: odoo
    image: odoo:17.0
    build:
      context: ./rabbitmq-broker
      dockerfile: Dockerfile.odoo
    depends_on:
      - postgresodoo
    ports:
      - "${ODOO_HOST_PORT}:${ODOO_CONTAINER_PORT}"
    volumes:
      - ./addons:/mnt/extra-addons
    environment:
      - DB_HOST=postgresodoo:${POSTGRES_ODOO_CONTAINER_PORT}
      - DB_USER=${POSTGRES_ODOO_USER}
      - DB_PASSWORD=${POSTGRES_ODOO_PASSWORD}

volumes:
  mysql-uuid-data:
  mysql-wordpress-data:
  postgres-data:
  wordpress-data:
  certs:
    driver: local
  esdata01:
    driver: local
  esdata02:
    driver: local
  esdata03:
    driver: local
  kibanadata:
    driver: local
  logstashdata01:
    driver: local
  logstashdata02:
    driver: local
  db-data:
    driver: local